// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VolleyMVC.Data;

namespace VolleyMVC.Migrations
{
    [DbContext(typeof(VolleyMVCContext))]
    [Migration("20200710235102_10")]
    partial class _10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VolleyMVC.Models.Acao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Destino");

                    b.Property<int>("JogadorId");

                    b.Property<bool>("Mandante");

                    b.Property<string>("Movimento")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("Origem");

                    b.Property<int>("PontoId");

                    b.Property<int>("Qualidade");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.HasKey("Id");

                    b.HasIndex("JogadorId");

                    b.HasIndex("PontoId");

                    b.ToTable("Acao");
                });

            modelBuilder.Entity("VolleyMVC.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Genero");

                    b.Property<int>("Idade_Max");

                    b.Property<int>("TimeId");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("VolleyMVC.Models.Competicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Ano_Temporada");

                    b.Property<int>("CategoriaId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Competicao");
                });

            modelBuilder.Entity("VolleyMVC.Models.Jogador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Altura");

                    b.Property<int>("CategoriaId");

                    b.Property<string>("Cpf");

                    b.Property<DateTime>("Nascimento");

                    b.Property<string>("Nome");

                    b.Property<int>("Numero_Camisa");

                    b.Property<string>("Rg");

                    b.Property<int>("TimeId");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("TimeId");

                    b.ToTable("Jogador");
                });

            modelBuilder.Entity("VolleyMVC.Models.Partida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompeticaoId");

                    b.Property<int>("MandanteId");

                    b.Property<int>("Num_Sets");

                    b.Property<string>("OpcaoLancamento")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("VisitanteId");

                    b.HasKey("Id");

                    b.HasIndex("CompeticaoId");

                    b.HasIndex("MandanteId");

                    b.HasIndex("VisitanteId");

                    b.ToTable("Partida");
                });

            modelBuilder.Entity("VolleyMVC.Models.Ponto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PontoMandante");

                    b.Property<int>("PontoVisistante");

                    b.Property<int>("SetId");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.ToTable("Ponto");
                });

            modelBuilder.Entity("VolleyMVC.Models.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Num_Sets");

                    b.Property<int>("PartidaId");

                    b.Property<int>("PontosMandante");

                    b.Property<int>("PontosVisitante");

                    b.HasKey("Id");

                    b.HasIndex("PartidaId");

                    b.ToTable("Set");
                });

            modelBuilder.Entity("VolleyMVC.Models.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("VolleyMVC.Models.Acao", b =>
                {
                    b.HasOne("VolleyMVC.Models.Jogador", "Jogador")
                        .WithMany("Acoes")
                        .HasForeignKey("JogadorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VolleyMVC.Models.Ponto", "Ponto")
                        .WithMany("Acoes")
                        .HasForeignKey("PontoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VolleyMVC.Models.Categoria", b =>
                {
                    b.HasOne("VolleyMVC.Models.Time", "Time")
                        .WithMany("Categorias")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VolleyMVC.Models.Competicao", b =>
                {
                    b.HasOne("VolleyMVC.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VolleyMVC.Models.Jogador", b =>
                {
                    b.HasOne("VolleyMVC.Models.Categoria", "Categoria")
                        .WithMany("Jogadores")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VolleyMVC.Models.Time", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VolleyMVC.Models.Partida", b =>
                {
                    b.HasOne("VolleyMVC.Models.Competicao", "Competicao")
                        .WithMany("Partidas")
                        .HasForeignKey("CompeticaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VolleyMVC.Models.Time", "Mandante")
                        .WithMany("Partidas")
                        .HasForeignKey("MandanteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VolleyMVC.Models.Time", "Visitante")
                        .WithMany()
                        .HasForeignKey("VisitanteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VolleyMVC.Models.Ponto", b =>
                {
                    b.HasOne("VolleyMVC.Models.Set", "Set")
                        .WithMany("Pontos")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VolleyMVC.Models.Set", b =>
                {
                    b.HasOne("VolleyMVC.Models.Partida", "Partida")
                        .WithMany("Sets")
                        .HasForeignKey("PartidaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
